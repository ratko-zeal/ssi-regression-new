import pandas as pd
import numpy as np
import os

# --- CONFIGURATION ---

# This is the primary input file, which must be generated by the `build_maturity_index.py`
# script after you've applied the changes from our previous discussion.
# Make sure this file exists before running this script.
CONSOLIDATED_WEIGHTS_PATH = "outputs/final/consolidated_indicator_weights.csv"

# Define the output directory and file paths
OUTPUT_DIR = "outputs/final"
DOMAIN_IMPACT_PATH = os.path.join(OUTPUT_DIR, "domain_impact_summary.csv")
INDICATOR_IMPACT_PATH = os.path.join(OUTPUT_DIR, "indicator_impact_summary.csv")

# These are the blend weights from the main `build_maturity_index.py` script.
# They are used to create a blended impact score that reflects the main index's logic.
BLEND_W_LOG = 0.60
BLEND_W_PERCAP = 0.30

# --- MAIN ANALYSIS FUNCTION ---

def generate_impact_reports():
    """
    Analyzes the consolidated indicator weights to produce high-level summaries
    of domain and indicator impact on the predictive models.
    """
    # --- 1. Pre-run Checks and Data Loading ---
    print("Starting impact score generation...")

    # Ensure the output directory exists
    os.makedirs(OUTPUT_DIR, exist_ok=True)

    # Check if the required input file exists
    if not os.path.exists(CONSOLIDATED_WEIGHTS_PATH):
        print(f"\n--- ERROR ---")
        print(f"Input file not found: '{CONSOLIDATED_WEIGHTS_PATH}'")
        print("Please run the modified `build_maturity_index.py` script first to generate this file.")
        print("Aborting.")
        return

    print(f"Loading weights from: '{CONSOLIDATED_WEIGHTS_PATH}'")
    weights_df = pd.read_csv(CONSOLIDATED_WEIGHTS_PATH).copy()

    # --- 2. Calculate Blended Indicator Impact ---

    # We use absolute values because we care about the *magnitude* of impact, not its direction.
    # An indicator with a weight of -0.8 is just as impactful as one with a weight of +0.8.
    weights_df['impact_log'] = weights_df['weight_norm_log_model'].abs()
    weights_df['impact_pcap'] = weights_df['weight_norm_per_capita_model'].abs().fillna(0)

    # Normalize the blend weights so they sum to 1 (0.60 + 0.30 = 0.90)
    total_model_weight = BLEND_W_LOG + BLEND_W_PERCAP
    w_log_norm = BLEND_W_LOG / total_model_weight
    w_pcap_norm = BLEND_W_PERCAP / total_model_weight

    # Calculate the blended impact score for each indicator
    weights_df['blended_impact_score'] = (
        weights_df['impact_log'] * w_log_norm +
        weights_df['impact_pcap'] * w_pcap_norm
    )

    # --- 3. Generate Indicator Impact Report ---

    # Normalize the blended scores to a percentage for easy interpretation
    total_impact = weights_df['blended_impact_score'].sum()
    if total_impact > 0:
        weights_df['Blended Indicator Impact (%)'] = (weights_df['blended_impact_score'] / total_impact) * 100
    else:
        weights_df['Blended Indicator Impact (%)'] = 0.0

    # Select and order columns for the final report
    indicator_summary = weights_df[[
        'INDICATOR',
        'DOMAIN',
        'Blended Indicator Impact (%)'
    ]].sort_values('Blended Indicator Impact (%)', ascending=False)

    # Save the report
    indicator_summary.to_csv(INDICATOR_IMPACT_PATH, index=False)
    print(f"\nSuccessfully created Indicator Impact Summary: '{INDICATOR_IMPACT_PATH}'")

    # --- 4. Generate Domain Impact Report ---

    # Group by domain and sum the percentage impacts of the indicators within them
    domain_summary = indicator_summary.groupby('DOMAIN')['Blended Indicator Impact (%)'].sum().reset_index()
    domain_summary = domain_summary.rename(columns={'Blended Indicator Impact (%)': 'Blended Domain Impact (%)'})
    domain_summary = domain_summary.sort_values('Blended Domain Impact (%)', ascending=False)

    # Save the report
    domain_summary.to_csv(DOMAIN_IMPACT_PATH, index=False)
    print(f"Successfully created Domain Impact Summary: '{DOMAIN_IMPACT_PATH}'")

    # --- 5. Display Results ---
    print("\n--- Domain Impact Summary ---")
    print(domain_summary.to_string(index=False))

    print("\n--- Top 10 Most Impactful Indicators ---")
    print(indicator_summary.head(10).to_string(index=False))
    print("\nDone.")


if __name__ == "__main__":
    generate_impact_reports()
